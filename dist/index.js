(()=>{"use strict";var e={n:n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},d:(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},o:(e,n)=>Object.prototype.hasOwnProperty.call(e,n)};const n=require("express");var t=e.n(n);require("compression"),require("body-parser");const r=require("cli-color");var o=e.n(r);const c=o().red.bold;o().yellow,o().blue,Error;const s=new class{constructor(){this.DB_IS_CONNECTED=!1,this.RABBIT_IS_CONNECTED=!1}set connectedDB(e){this.DB_IS_CONNECTED=e}set connectedRabbit(e){this.RABBIT_IS_CONNECTED=e}get connectedDB(){return this.DB_IS_CONNECTED}get connectedRabbit(){return this.RABBIT_IS_CONNECTED}},i=t()(),a=require("fs");var u=e.n(a);function E(){try{return JSON.parse(u().readFileSync("./configApp.json","utf8"))}catch(e){throw new Error(e)}}const _=require("mongoose");var l=e.n(_);const m=require("http");var N=e.n(m);const B=require("ws");var R=e.n(B);let T=null;const I=require("amqplib/callback_api");var d=e.n(I);let g=null;const C=E().RABBITMQ_URL||"",D=E().RABBITMQ_RECEIVE_QUEUE_NAME||"",b={durable:!1,autoDelete:!0};function A(e){d().connect(C,(function(n,t){n&&(g=null,e.emit("errorLog",n,"AMQP"),s.connectedRabbit=!1,setTimeout(A.bind(null,e),1e3)),t.on("error",(function(t){g=null,"Connection closing"!==t.message&&e.emit("errorLog",n,"AMQP"),s.connectedRabbit=!1,setTimeout(A.bind(null,e),1e3)})),t.on("close",(function(){g=null,e.emit("eventLog","AMQP_IS_RECONNECTING","amqp reconnecting"),s.connectedRabbit=!1,setTimeout(A.bind(null,e),1e3)})),e.emit("eventLog","AMQP_IS_CONNECTED","amqp connected"),g=t,s.connectedRabbit=!0,function(e){g&&g.createChannel((function(n,t){S(n,e)||(t.on("error",(function(n){e.emit("errorLog",n,"AMQP_CHANNEL")})),t.on("close",(function(){e.emit("eventLog","AMQP_CHANNEL_IS_CLOSED","amqp канал получения закрыт")})),t.prefetch(10),t.assertQueue(D,b,(function(n,r){S(n,e)||(t.consume(D,(function(n){!function(n,t){e.emit("getMessageRabbit",n),t(!0)}(n,(function(r){try{r?t.ack(n):t.reject(n,!0)}catch(n){S(n,e)}}))}),{noAck:!1}),e.emit("eventLog","AMQP_WORKER_IS_STARTED","amqp worker запущен"))})),t.bindQueue(D,E().RABBITMQ_RECEIVE_EXCHANGE||"",E().RABBITMQ_RECEIVE_ROUTING_KEY||"",{"x-message-ttl":Number(E().RABBITMQ_RECEIVE_BIND_XMTTL)||6e5}))}))}(e)}))}function S(e,n){return!(!e||!g||(n.emit("errorLog",e,"AMQP"),g.close(),0))}E().RABBITMQ_SEND_EXCHANGE;const p=N().createServer(i);var O;O={server:p,path:process.env.BASE_PATH||""},T=new(R().Server)(O),T.on("connection",(e=>{e.on("message",(n=>{i.emit("getMessageFromWS",e,n)})),e.on("error",(n=>{i.emit("errorLog",n,"SOCKET"),e.send(n)})),i.emit("wsConnecting",e)})),p.listen(E().PORT,(()=>{var e;(e=i,l().connect(`mongodb://${E().DB_HOST}:${E().DB_PORT}${E().DB_STRING_OPTIONS}`,{useUnifiedTopology:!0,useNewUrlParser:!0,useCreateIndex:!0,dbName:E().DB_NAME,user:E().DB_USER,pass:E().DB_PASSWORD}).then((()=>{e.emit("eventLog","DB_IS_CONNECTED","Подключение к БД прошло успешно"),s.connectedDB=!0})).catch((e=>(s.connectedDB=!1,Promise.reject(e))))).then((()=>{i.emit("eventLog","SERVER_IS_RUNNING",`port: ${E().PORT}, mode: production`),E().USE_RABBIT&&A(i)})).catch((e=>{console.error(c(`⚡️[error DB]: ${new Date} - name: ${e.name}, message: ${e.message}, stack: `,e.stack)),process.exit(2)}))})).on("error",(e=>{console.error(c(`⚡️[error server]: ${new Date} - name: ${e.name}, message: ${e.message}, stack: `,e.stack)),process.exit(2)}))})();